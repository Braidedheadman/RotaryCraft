/*******************************************************************************
 * @author Reika Kalseki
 * 
 * Copyright 2013
 * 
 * All rights reserved.
 * Distribution of the software in any form is only allowed with
 * explicit, prior permission from the owner.
 ******************************************************************************/
package Reika.RotaryCraft.Auxiliary;

import java.lang.reflect.Method;
import java.util.EnumSet;
import java.util.List;

import net.minecraft.inventory.IInventory;
import net.minecraft.item.ItemStack;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.world.World;
import Reika.RotaryCraft.Registry.ItemRegistry;
import cpw.mods.fml.common.ITickHandler;
import cpw.mods.fml.common.TickType;

public class BedrockDisenchanterExploitPreventer implements ITickHandler {

	private final Class poweredBase;
	private final Method setWork;

	public BedrockDisenchanterExploitPreventer() {
		Class pwr = null;
		Method set = null;
		try {
			pwr = Class.forName("powercrystals.minefactoryreloaded.tile.base.TileEntityFactoryPowered");
			set = pwr.getDeclaredMethod("setWorkDone", int.class);
		}
		catch (ClassNotFoundException e) {
			e.printStackTrace();
		}
		catch (NoSuchMethodException e) {
			e.printStackTrace();
		}
		catch (SecurityException e) {
			e.printStackTrace();
		}
		poweredBase = pwr;
		setWork = set;
	}

	@Override
	public void tickStart(EnumSet<TickType> type, Object... tickData) {

	}

	@Override
	public void tickEnd(EnumSet<TickType> type, Object... tickData) {
		World world = (World)tickData[0];
		List<TileEntity> li = world.loadedTileEntityList; //Get all loaded TileEntities
		for (int i = 0; i < li.size(); i++) {
			TileEntity te = li.get(i);
			if (te.getClass().getSimpleName().toLowerCase().contains("tileentityautodisenchanter")) { //Any disenchanters
				try {
					IInventory ii = (IInventory)te;
					ItemStack is = ii.getStackInSlot(0); //get "to be disenchanted" item
					if (is != null) {
						ItemRegistry ir = ItemRegistry.getEntry(is);
						if (ir != null) {
							//if is one of the un-disenchantable items
							if (ir.isBedrockArmor() || ir.isBedrockTool() || is.itemID == ItemRegistry.BEDPACK.getShiftedID() || is.itemID == ItemRegistry.BEDJUMP.getShiftedID()) {
								setWork.invoke(te, 0); //set work to zero (makes machine not "finish" an operation cycle)
							}
						}
					}
				}
				catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	@Override
	public EnumSet<TickType> ticks() {
		return EnumSet.of(TickType.WORLD);
	}

	@Override
	public String getLabel() {
		return "Bedrock Pickaxe MFR Disenchanter Exploit Preventer";
	}

}
